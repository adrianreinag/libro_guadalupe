---
// Importaciones y configuración
import BaseLayout from '../../../layouts/BaseLayout.astro';
import leccionarioData from '../../../data/leccionario.json';
import { Leccionario } from '../../../classes/leccionario.ts';
import HeaderComponent from '../../../components/HeaderComponent.astro';

interface Path {
  params: {
    dia: string;
  };
}

export async function getStaticPaths(): Promise<Path[]> {
  const dias = ['viernes', 'sabado', 'domingo'];

  const paths: Path[] = dias.map(dia => ({
    params: { dia }
  }));

  return paths;
}

const { dia } = Astro.params;

if (!['viernes', 'sabado', 'domingo'].includes(dia)) {
  throw new Error('Día no válido.');
}

const getLecturas = (diaSeleccionado: string) => {
  return Leccionario.fromJSON(leccionarioData, diaSeleccionado);
};

const lecturas = getLecturas(dia);
---

<BaseLayout title="Leccionario">
  <HeaderComponent title="Leccionario" />

  <div class="flex flex-col h-screen bg-stone-50">
    <nav class="flex justify-around items-center p-4 bg-white shadow-sm">
      {[
        { id: 'lecturas', label: 'Lecturas' },
        { id: 'cantos', label: 'Cantos' },
        { id: 'oraciones', label: 'Oraciones' },
      ].map((tab) => (
        <button
          data-tab={tab.id}
          class="flex items-center justify-center w-24 h-12 p-2 rounded-lg transition-colors text-gray-500 hover:bg-gray-100"
        >
          <span class="text-sm font-medium text-center">{tab.label}</span>
        </button>
      ))}
    </nav>

    <main
      id="scrollContainer"
      class="flex-1 flex overflow-x-auto snap-x snap-mandatory"
      style="scroll-snap-type: x mandatory;"
    >
      <section class="flex-shrink-0 w-full snap-center">
        <div class="p-6 space-y-4">
          <h2 class="text-2xl font-semibold text-gray-800">Lecturas del día - {dia}</h2>

          <h2 class="titulo-seccion mb-6">Primera lectura</h2>
          <p class="comentario-derecha mb-6">{lecturas.primeraLectura.cita}</p>
          <h3 class="titulo-salmos mb-4">{lecturas.primeraLectura.titulo}</h3>
          <p class="parrafo mb-10">{lecturas.primeraLectura.texto}</p>

          {lecturas.salmo && (
            <>
              <h2 class="titulo-seccion mb-6">Salmo responsorial</h2>
              <h3 class="titulo-salmos mb-4">Salmo {lecturas.salmo.titulo}</h3>
              <p class="parrafo mb-6"><span class="red">Ant. </span>{lecturas.salmo.antifona}</p>
              {lecturas.salmo.versos.map((verso, index) => (
                <div class="ps-4">
                  <p class={`parrafo ${index === lecturas.salmo.versos.length - 1 ? 'mb-10' : 'mb-6'}`}>{verso}</p>
                </div>
              ))}
            </>
          )}

          {lecturas.segundaLectura && (
            <>
              <h2 class="titulo-seccion mb-6">Segunda lectura</h2>
              <p class="comentario-derecha mb-6">{lecturas.segundaLectura.cita}</p>
              <h3 class="titulo-salmos mb-4">{lecturas.segundaLectura.titulo}</h3>
              <p class="parrafo mb-10">{lecturas.segundaLectura.texto}</p>
            </>
          )}

          <h2 class="titulo-seccion mb-6">Evangelio</h2>
          <p class="comentario-derecha mb-6">{lecturas.evangelio.cita}</p>
          <h3 class="titulo-salmos mb-4">{lecturas.evangelio.titulo}</h3>
          <p class="parrafo mb-10">{lecturas.evangelio.texto}</p>
        </div>
      </section>

      <section class="flex-shrink-0 w-full snap-center">
        <div class="p-6 space-y-4">
          <h2 class="text-2xl font-semibold text-gray-800">Cantos litúrgicos</h2>
          <p class="text-gray-600">Lista de cantos iría aquí...</p>
        </div>
      </section>

      <section class="flex-shrink-0 w-full snap-center">
        <div class="p-6 space-y-4">
          <h2 class="text-2xl font-semibold text-gray-800">Oraciones</h2>
          <p class="text-gray-600">Colección de oraciones...</p>
        </div>
      </section>
    </main>
  </div>
</BaseLayout>

<script lang="ts">
  const scrollContainer = document.getElementById('scrollContainer');
  const tabs = document.querySelectorAll('[data-tab]');
  let activeTab = 'lecturas';

  function handleScroll() {
    if (scrollContainer) {
      const { scrollLeft, scrollWidth, clientWidth } = scrollContainer;
      const sectionWidth = scrollWidth / tabs.length;
      const activeIndex = Math.round(scrollLeft / sectionWidth);
      setActiveTab(tabs[activeIndex].dataset.tab || '');
    }
  }

  function setActiveTab(tabId) {
    activeTab = tabId;
    tabs.forEach(tab => {
      if (tab.dataset.tab === activeTab) {
        tab.classList.add('text-blue-600', 'bg-blue-50');
        tab.classList.remove('text-gray-500');
      } else {
        tab.classList.remove('text-blue-600', 'bg-blue-50');
        tab.classList.add('text-gray-500');
      }
    });
  }

  function scrollToTab(tabId) {
    const index = Array.from(tabs).findIndex(tab => tab.dataset.tab === tabId);
    if (scrollContainer) {
      const sectionWidth = scrollContainer.scrollWidth / tabs.length;
      scrollContainer.scrollTo({
        left: sectionWidth * index,
        behavior: 'smooth'
      });
    }
  }

  scrollContainer?.addEventListener('scroll', handleScroll);

  tabs.forEach(tab => {
    tab.addEventListener('click', () => scrollToTab(tab.dataset.tab || ''));
  });

  // Inicializar la pestaña activa
  setActiveTab(activeTab);
</script>


<style>
  .titulo-seccion {
      font-size: 1.25rem;
      font-weight: 700;
  }

  .comentario-derecha {
    font-weight: 300;
    font-size: 0.85rem;
    text-align: end;
    padding-left: 2rem;
    color: rgb(220 38 38);
  }

  .parrafo {
    font-size: 1rem;
    font-weight: 300;
  }

  .red {
    color: rgb(220 38 38);
  }

  .titulo-salmos {
    font-size: 1.05rem;
    text-align: center;
    color: rgb(220 38 38);
  }
</style>
